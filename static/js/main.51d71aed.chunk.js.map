{"version":3,"sources":["types/Player.ts","types/Room.ts","services/Db.service.ts","services/DeviceData.service.ts","services/LocalStorage.service.ts","services/Rooms.service.ts","components/CreateOrJoinRoom.tsx","components/ProfileButton.tsx","components/Nav.tsx","components/UsernameForm.tsx","hooks/useDeviceData.ts","components/PlayerCard.tsx","components/PointPickerForm.tsx","components/PokerRoom.tsx","pages/PokerRoomPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Player","name","flipped","value","Room","firstPlayerUsername","firstPlayerName","players","this","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","DatabaseService","database","ref","child","analytics","localStorage","APP_NAME","key","setItem","getKey","JSON","stringify","stringifiedValue","getItem","parse","LOCAL_STORAGE_KEY","callbacks","getDeviceData","getAppStorage","setDeviceData","deviceData","newData","setAppStorage","forEach","callback","DeviceDataService","onChange","push","setName","userId","uuidv4","RoomsRef","RoomsService","createRoom","roomName","once","then","snapshot","rooms","val","roomId","shortid","generate","Error","Promise","resolve","reject","set","err","onRoomUpdate","on","addRoomPlayer","removeRoomPlayer","remove","updateRoomPlayer","updatedPlayer","update","flipAllRoomCards","currentRoom","Object","entries","player","resetAllRoomCards","CreateOrJoinRoom","useState","setRoomName","roomCode","setRoomCode","history","useHistory","navigateToRoom","onSubmit","e","preventDefault","htmlFor","className","id","type","placeholder","aria-label","target","newRoomCode","catch","console","log","ProfileButton","children","expanded","setExpanded","buttonRef","useRef","useEffect","foobar","current","window","addEventListener","removeEventListener","data-bs-toggle","aria-expanded","onClick","style","right","left","aria-labelledby","Nav","display","justifyContent","width","to","UsernameForm","useDeviceData","setUserId","trackUserId","PlayerCard","onRemovePlayer","currentUser","pulse","setPulse","timeoutId","setTimeout","clearTimeout","div","values","PointPickerForm","onExit","selectedPoints","setSelectedPoints","map","PokerRoom","room","handleRemovePlayer","sortedPlayers","sort","a","mode","filter","Number","stats","Array","join","Set","from","toString","calculateRoomMode","mean","calculateRoomMean","PokerRoomPage","useParams","setRoom","loading","setLoading","invalidRoom","setInvalidRoom","newRoomData","logEvent","page_title","page_location","location","href","page_path","error","logPageView","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d71aed.chunk.js","sourcesContent":["export class Player {\r\n  flipped = false;\r\n  value = '';\r\n\r\n  constructor(public name: string) {}\r\n}\r\n","import { Player } from './Player';\r\nimport * as stats from 'stats-lite';\r\n\r\nexport type RoomPlayers = { [key: string]: Player };\r\nexport class Room {\r\n  flipped = false;\r\n  players: RoomPlayers;\r\n\r\n  constructor(\r\n    public name: string,\r\n    firstPlayerUsername: string,\r\n    firstPlayerName: string\r\n  ) {\r\n    this.players = { [firstPlayerUsername]: new Player(firstPlayerName) };\r\n  }\r\n}\r\n\r\nexport function calculateRoomMode(players: RoomPlayers): string {\r\n  const values = Object.entries(players)\r\n    .map(([_key, players]) => players)\r\n    .filter((player) => player.flipped)\r\n    .map((player) => Number(player.value));\r\n\r\n  if (values.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  const mode = stats.mode(values) as number | number[] | Set<number>;\r\n\r\n  if (mode instanceof Array) {\r\n    return mode.sort().join(',');\r\n  } else if (mode instanceof Set) {\r\n    return Array.from(mode).sort().join(',');\r\n  } else {\r\n    return mode.toString();\r\n  }\r\n}\r\n\r\nexport function calculateRoomMean(players: RoomPlayers): string {\r\n  const values = Object.entries(players)\r\n    .map(([_key, players]) => players)\r\n    .filter((player) => player.flipped)\r\n    .map((player) => Number(player.value));\r\n\r\n  if (values.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  return stats.mean(values).toString();\r\n}\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/analytics';\r\n\r\nif (!firebase.apps.length) {\r\n  firebase.initializeApp({\r\n    apiKey: 'AIzaSyDQw8SrAqQ4yDwbMpolW574MgJf0Znwa4c',\r\n    authDomain: 'planning-poker-project-22.firebaseapp.com',\r\n    databaseURL: 'https://planning-poker-project-22-default-rtdb.firebaseio.com',\r\n    projectId: 'planning-poker-project-22',\r\n    storageBucket: 'planning-poker-project-22.appspot.com',\r\n    messagingSenderId: '681283855494',\r\n    appId: '1:681283855494:web:6033cb8884800c770a1d07',\r\n    measurementId: 'G-W2JXHCQC1R',\r\n  });\r\n}\r\n\r\n// if (!firebase.apps.length) {\r\n//   firebase.initializeApp({\r\n//     apiKey: 'AIzaSyCbCXKvaOhPnqcgEjhESuo9IjCLbvyx8GA',\r\n//     authDomain: 'testing-7bdba.firebaseapp.com',\r\n//     databaseURL: 'https://testing-7bdba.firebaseio.com',\r\n//     projectId: 'testing-7bdba',\r\n//     storageBucket: 'testing-7bdba.appspot.com',\r\n//     messagingSenderId: '123433442681',\r\n//     appId: '1:123433442681:web:e2576007bf4485162ca3a8',\r\n//     measurementId: 'G-3JGGSGBJH4',\r\n//   });\r\n// }\r\n\r\nexport const DatabaseService = firebase\r\n  .database()\r\n  .ref()\r\n  .child('planning-poker-v2');\r\n\r\nexport const analytics = firebase.analytics();\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport { MaybeDeviceData } from '../types/DeviceData.interface';\r\nimport { LocalStorageService } from './LocalStorage.service';\r\n\r\nconst localStorage = new LocalStorageService<MaybeDeviceData>('PLANNING_POKER');\r\nconst LOCAL_STORAGE_KEY = 'deviceData';\r\ntype OnChangeCallback = (deviceData: MaybeDeviceData) => void;\r\nconst callbacks: OnChangeCallback[] = [];\r\n\r\nfunction getDeviceData(): MaybeDeviceData {\r\n  return localStorage.getAppStorage(LOCAL_STORAGE_KEY);\r\n}\r\n\r\nfunction setDeviceData(deviceData: MaybeDeviceData): MaybeDeviceData {\r\n  const newData = localStorage.setAppStorage(LOCAL_STORAGE_KEY, deviceData);\r\n  callbacks.forEach((callback) => callback(newData));\r\n  return newData;\r\n}\r\n\r\nfunction onChange(callback: OnChangeCallback) {\r\n  callbacks.push(callback);\r\n}\r\n\r\nfunction setName(name: string): void {\r\n  setDeviceData({\r\n    ...getDeviceData(),\r\n    name: name,\r\n    userId: `${uuidv4()}_${name}`,\r\n  });\r\n}\r\n\r\nexport const DeviceDataService = {\r\n  getDeviceData,\r\n  setDeviceData,\r\n  onChange,\r\n  setName,\r\n};\r\n","export class LocalStorageService<T> {\r\n  constructor(private APP_NAME: string) {}\r\n\r\n  setAppStorage(key: string, value: T) {\r\n    localStorage.setItem(this.getKey(key), JSON.stringify(value));\r\n    return value;\r\n  }\r\n\r\n  getAppStorage(key: string): T {\r\n    const stringifiedValue = localStorage.getItem(this.getKey(key));\r\n    return stringifiedValue && JSON.parse(stringifiedValue);\r\n  }\r\n\r\n  private getKey(key: string): string {\r\n    return `${this.APP_NAME}.${key}`;\r\n  }\r\n}\r\n","import shortid from 'shortid';\r\nimport { Player } from '../types/Player';\r\nimport { Room } from '../types/Room';\r\nimport { DatabaseService } from './Db.service';\r\nimport { DeviceDataService } from './DeviceData.service';\r\n\r\nconst RoomsRef = DatabaseService.child('rooms');\r\n\r\nfunction createRoom(roomName: string): Promise<string> {\r\n  return RoomsRef.once('value').then((snapshot) => {\r\n    const rooms = snapshot.val() || {};\r\n\r\n    const roomId = shortid.generate();\r\n    if (roomId in rooms) {\r\n      // try a couple times?\r\n      throw new Error('couldnt create new room b/c of id collision');\r\n    }\r\n\r\n    const deviceData = DeviceDataService.getDeviceData();\r\n    if (!deviceData) {\r\n      throw new Error('deviceData not defined');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      RoomsRef.child(roomId).set(\r\n        new Room(roomName, deviceData.userId, deviceData.name),\r\n        (err) => {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve(roomId);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n}\r\n\r\nfunction onRoomUpdate(roomId: string, callback: (room: Room | null) => void) {\r\n  RoomsRef.child(roomId).on('value', (snapshot) => callback(snapshot.val()));\r\n}\r\n\r\nfunction addRoomPlayer(roomId: string, userId: string, name: string) {\r\n  RoomsRef.child(roomId).child('players').child(userId).set(new Player(name));\r\n}\r\n\r\nfunction removeRoomPlayer(roomId: string, userId: string) {\r\n  RoomsRef.child(roomId).child('players').child(userId).remove();\r\n}\r\n\r\nfunction updateRoomPlayer(\r\n  roomId: string,\r\n  userId: string,\r\n  updatedPlayer: Partial<Player>\r\n) {\r\n  RoomsRef.child(roomId).child('players').child(userId).update(updatedPlayer);\r\n}\r\n\r\nfunction flipAllRoomCards(roomId: string, currentRoom: Room) {\r\n  const players = currentRoom.players;\r\n  Object.entries(players).forEach(([_userId, player]) => {\r\n    if (player.value) {\r\n      player.flipped = true;\r\n    }\r\n  });\r\n\r\n  RoomsRef.child(roomId).child('players').update(players);\r\n}\r\n\r\nfunction resetAllRoomCards(roomId: string, currentRoom: Room) {\r\n  const players = currentRoom.players;\r\n  Object.entries(players).forEach(([_userId, player]) => {\r\n    player.value = '';\r\n    player.flipped = false;\r\n  });\r\n\r\n  RoomsRef.child(roomId).child('players').update(players);\r\n}\r\n\r\nexport const RoomsService = {\r\n  createRoom,\r\n  onRoomUpdate,\r\n  addRoomPlayer,\r\n  removeRoomPlayer,\r\n  updateRoomPlayer,\r\n  flipAllRoomCards,\r\n  resetAllRoomCards,\r\n};\r\n","import { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RoomsService } from '../services/Rooms.service';\r\n\r\nexport const CreateOrJoinRoom: FunctionComponent<{}> = () => {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n  const [roomName, setRoomName] = useState('');\r\n  const [roomCode, setRoomCode] = useState('');\r\n  const history = useHistory();\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n  function createRoom(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    roomName &&\r\n      RoomsService.createRoom(roomName)\r\n        .then((newRoomCode) => {\r\n          navigateToRoom(newRoomCode);\r\n        })\r\n        .catch((err) => {\r\n          console.log('err =', err);\r\n        });\r\n  }\r\n\r\n  function joinRoom(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (!roomCode) {\r\n      return;\r\n    }\r\n\r\n    navigateToRoom(roomCode);\r\n  }\r\n\r\n  function navigateToRoom(roomCode: string) {\r\n    history.push(`/rooms/${roomCode}`);\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  return (\r\n    <div>\r\n      <form onSubmit={joinRoom}>\r\n        <label htmlFor=\"roomCode\">Join Room:</label>\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            id=\"roomCode\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Room Code\"\r\n            aria-label=\"Room Code\"\r\n            onChange={(e) => setRoomCode(e.target.value)}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-outline-primary\"\r\n              type=\"submit\"\r\n              id=\"joinRoomButton\"\r\n            >\r\n              Join Room\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      <form onSubmit={createRoom}>\r\n        <label htmlFor=\"roomName\">Create Room:</label>\r\n        <div className=\"input-group mb-3\">\r\n          <input\r\n            id=\"roomName\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Room Name\"\r\n            aria-label=\"Room Name\"\r\n            onChange={(e) => setRoomName(e.target.value)}\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              id=\"createRoomButton\"\r\n              className=\"btn btn-outline-secondary\"\r\n              type=\"submit\"\r\n            >\r\n              Create Room\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\r\nimport { DeviceData } from '../types/DeviceData.interface';\r\n\r\nexport const ProfileButton: FunctionComponent<{\r\n  deviceData: DeviceData;\r\n}> = ({ deviceData, children }) => {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  // ----------------------------------------\r\n  // effects\r\n  // ----------------------------------------\r\n  const buttonRef = useRef(null);\r\n  useEffect(() => {\r\n    function foobar(e: MouseEvent) {\r\n      if (e.target !== buttonRef.current) {\r\n        setExpanded(false);\r\n      }\r\n    }\r\n    window.addEventListener('click', foobar);\r\n\r\n    return function cleanup() {\r\n      window.removeEventListener('click', foobar);\r\n    };\r\n  }, []);\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  return (\r\n    <div className=\"btn-group\">\r\n      <div className=\"dropdown\">\r\n        <button\r\n          ref={buttonRef}\r\n          className=\"btn btn-outline-secondary dropdown-toggle\"\r\n          type=\"button\"\r\n          id=\"profileMenuButton\"\r\n          aria-label=\"Profile Options\"\r\n          data-bs-toggle=\"dropdown\"\r\n          aria-expanded={expanded}\r\n          onClick={() => setExpanded(!expanded)}\r\n        >\r\n          Hello {deviceData.name}!\r\n        </button>\r\n        <ul\r\n          className={`dropdown-menu ${expanded ? 'show' : ''}`}\r\n          style={{ right: 0, left: 'auto' }}\r\n          aria-labelledby=\"profileMenuButton\"\r\n        >\r\n          {children}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FunctionComponent } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { DeviceDataService } from '../services/DeviceData.service';\r\nimport { DeviceData } from '../types/DeviceData.interface';\r\nimport { ProfileButton } from './ProfileButton';\r\n\r\nexport const Nav: FunctionComponent<{ deviceData: DeviceData | null }> = ({\r\n  deviceData,\r\n}) => {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n  const history = useHistory();\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n  function logout() {\r\n    DeviceDataService.setDeviceData(null);\r\n    history.push('/');\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-purpl\">\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          width: '100%',\r\n        }}\r\n      >\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          Planning Poker\r\n        </Link>\r\n        {deviceData && (\r\n          <ProfileButton deviceData={deviceData}>\r\n            <li>\r\n              <button className=\"dropdown-item\" onClick={logout}>\r\n                Logout\r\n              </button>\r\n            </li>\r\n          </ProfileButton>\r\n        )}\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import React, { FunctionComponent, useState } from 'react';\r\n\r\nexport const UsernameForm: FunctionComponent<{\r\n  onSubmit: (name: string) => void;\r\n}> = ({ onSubmit }) => {\r\n  // ----------------------------------------\r\n  // State\r\n  // ----------------------------------------\r\n  const [name, setName] = useState('');\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n  function handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (name === '') {\r\n      return;\r\n    }\r\n    onSubmit(name);\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // Render\r\n  // ----------------------------------------\r\n  return (\r\n    <div>\r\n      <div>Please enter your name:</div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-row\">\r\n          <div className=\"col\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              value={name}\r\n              onChange={handleNameChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-auto\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { analytics } from '../services/Db.service';\r\nimport { DeviceDataService } from '../services/DeviceData.service';\r\nimport { MaybeDeviceData } from '../types/DeviceData.interface';\r\n\r\nexport function useDeviceData(): [MaybeDeviceData, (name: string) => void] {\r\n  const [deviceData, setDeviceData] = useState<MaybeDeviceData>(\r\n    DeviceDataService.getDeviceData()\r\n  );\r\n\r\n  // ----------------------------------------\r\n  // effects\r\n  // ----------------------------------------\r\n  useEffect(() => {\r\n    DeviceDataService.onChange((deviceData) => {\r\n      trackUserId(deviceData);\r\n      setDeviceData(deviceData);\r\n    });\r\n  }, []);\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n  function setName(name: string) {\r\n    DeviceDataService.setName(name);\r\n  }\r\n\r\n  return [deviceData, setName];\r\n}\r\nfunction trackUserId(deviceData: MaybeDeviceData) {\r\n  if (deviceData?.userId) {\r\n    analytics.setUserId(deviceData.userId);\r\n  }\r\n}\r\n","import { useState, useEffect, FunctionComponent } from 'react';\r\nimport './PlayerCard.css';\r\nimport { animated } from 'react-spring';\r\nimport { Player } from '../types/Player';\r\n\r\nfunction cardClass(flipped: boolean, value: string) {\r\n  if (!value) {\r\n    return 'empty';\r\n  }\r\n  if (!flipped) {\r\n    return 'ready';\r\n  }\r\n  return 'flipped';\r\n}\r\n\r\nexport const PlayerCard: FunctionComponent<{\r\n  userId: string;\r\n  currentUser: string;\r\n  player: Player;\r\n  onRemovePlayer: (userId: string) => void;\r\n}> = ({ userId, player, onRemovePlayer, currentUser }) => {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n  const [pulse, setPulse] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (player.value) {\r\n      setPulse(true);\r\n    }\r\n    const timeoutId = setTimeout(() => {\r\n      setPulse(false);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      // Clean up the timeout\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [player.value]);\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  return (\r\n    <div className=\"col-6 col-sm-4 col-md-3 mb-3\">\r\n      <div className={`player-tile ${currentUser === userId ? 'me' : ''}`}>\r\n        <div className=\"player-name\">\r\n          <div>{player.name} </div>\r\n          <small>{currentUser === userId ? '(you)' : ''}</small>\r\n          <div className=\"player-remove\" onClick={() => onRemovePlayer(userId)}>\r\n            ✕\r\n          </div>\r\n        </div>\r\n        <animated.div\r\n          className={`player-card ${pulse ? 'pulse' : ''} ${cardClass(\r\n            player.flipped,\r\n            player.value\r\n          )}`}\r\n        >\r\n          <div>{player.flipped ? player.value : ''}</div>\r\n        </animated.div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FunctionComponent, useState } from 'react';\r\n\r\nconst values = ['?', '0', '0.5', '1', '2', '3', '5', '8', '13', '21'];\r\n\r\nexport const PointPickerForm: FunctionComponent<{\r\n  onSubmit: (selectedPoints: string) => void;\r\n  onExit: () => void;\r\n}> = ({ onSubmit, onExit }) => {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n  const [selectedPoints, setSelectedPoints] = useState('');\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n  function handleSubmit(e: React.FormEvent) {\r\n    e.preventDefault();\r\n    if (selectedPoints === '') {\r\n      return;\r\n    }\r\n    onSubmit(selectedPoints);\r\n  }\r\n\r\n  function handlePointChange(e: React.ChangeEvent<HTMLSelectElement>) {\r\n    setSelectedPoints(e.target.value);\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form-row\">\r\n          <div className=\"col-auto\">\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={onExit}>\r\n              Exit Room\r\n            </button>\r\n          </div>\r\n          <div className=\"col\">\r\n            <select\r\n              id=\"points\"\r\n              className=\"form-control\"\r\n              onChange={handlePointChange}\r\n            >\r\n              <option value=\"\">Pick your points</option>\r\n              {values.map((value) => (\r\n                <option key={value} value={value}>\r\n                  {value}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"col-auto\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FunctionComponent, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { RoomsService } from '../services/Rooms.service';\r\nimport { DeviceData } from '../types/DeviceData.interface';\r\nimport { calculateRoomMean, calculateRoomMode, Room } from '../types/Room';\r\nimport { PlayerCard } from './PlayerCard';\r\nimport { PointPickerForm } from './PointPickerForm';\r\n\r\nexport const PokerRoom: FunctionComponent<{\r\n  roomId: string;\r\n  room: Room;\r\n  deviceData: DeviceData;\r\n}> = ({ roomId, room, deviceData }) => {\r\n  // ----------------------------------------\r\n  // constants\r\n  // ----------------------------------------\r\n  const history = useHistory();\r\n\r\n  // ----------------------------------------\r\n  // effects\r\n  // ----------------------------------------\r\n  useEffect(() => {\r\n    RoomsService.addRoomPlayer(roomId, deviceData.userId, deviceData.name);\r\n  }, [roomId, deviceData]);\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n  function handleExit() {\r\n    history.push('/');\r\n  }\r\n\r\n  function handleRemovePlayer(userId: string) {\r\n    if (userId === deviceData.userId) {\r\n      return;\r\n    }\r\n    RoomsService.removeRoomPlayer(roomId, userId);\r\n  }\r\n\r\n  function handlePointSubmit(selectedPoints: string) {\r\n    RoomsService.updateRoomPlayer(roomId, deviceData.userId, {\r\n      value: selectedPoints,\r\n      flipped: false,\r\n    });\r\n  }\r\n\r\n  function handleFlipAllCards() {\r\n    RoomsService.flipAllRoomCards(roomId, room);\r\n  }\r\n\r\n  function handleResetCards() {\r\n    RoomsService.resetAllRoomCards(roomId, room);\r\n  }\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  const sortedPlayers = Object.entries(room.players).sort(([a], [b]) => {\r\n    if (a === deviceData.userId) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n\r\n  const mode = calculateRoomMode(room.players);\r\n  const mean = calculateRoomMean(room.players);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <strong>You're in room:</strong> {room.name}\r\n      </div>\r\n      <div className=\"mb-2\">\r\n        <strong>Room code:</strong> {roomId}\r\n      </div>\r\n\r\n      <div className=\"mb-2 poker-info\">\r\n        <PointPickerForm\r\n          onSubmit={handlePointSubmit}\r\n          onExit={handleExit}\r\n        ></PointPickerForm>\r\n      </div>\r\n      <div className=\"text-center mb-3\">\r\n        Mode: {mode} | Mean : {mean}\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        {sortedPlayers.map(([userId, player]) => (\r\n          <PlayerCard\r\n            key={userId}\r\n            userId={userId}\r\n            currentUser={deviceData.userId}\r\n            player={player}\r\n            onRemovePlayer={handleRemovePlayer}\r\n          ></PlayerCard>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"mb-3 text-center poker-footer\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-success mr-3\"\r\n          onClick={handleFlipAllCards}\r\n        >\r\n          Flip all cards\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          onClick={handleResetCards}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n      {/* <pre>{JSON.stringify(room, null, 2)}</pre> */}\r\n    </div>\r\n  );\r\n};\r\n","import { FunctionComponent, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { RoomsService } from '../services/Rooms.service';\r\nimport { DeviceData } from '../types/DeviceData.interface';\r\nimport { Room } from '../types/Room';\r\nimport { PokerRoom } from '../components/PokerRoom';\r\nimport { analytics } from '../services/Db.service';\r\n\r\nexport const PokerRoomPage: FunctionComponent<{ deviceData: DeviceData }> = ({\r\n  deviceData,\r\n}) => {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n  const { roomId } = useParams<{ roomId: string }>();\r\n  const [room, setRoom] = useState<Room | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [invalidRoom, setInvalidRoom] = useState(false);\r\n\r\n  // ----------------------------------------\r\n  // effects\r\n  // ----------------------------------------\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    RoomsService.onRoomUpdate(roomId, (newRoomData) => {\r\n      setLoading(false);\r\n      console.log('newRoomData =', newRoomData);\r\n\r\n      if (newRoomData) {\r\n        setInvalidRoom(false);\r\n        setRoom(newRoomData);\r\n\r\n        logPageView(roomId, newRoomData);\r\n      } else {\r\n        setInvalidRoom(true);\r\n      }\r\n    });\r\n  }, [roomId]);\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  } else if (invalidRoom || !room) {\r\n    return <div>Room Not Found</div>;\r\n  } else {\r\n    return (\r\n      <PokerRoom\r\n        roomId={roomId}\r\n        room={room}\r\n        deviceData={deviceData}\r\n      ></PokerRoom>\r\n    );\r\n  }\r\n};\r\n\r\nfunction logPageView(roomId: string, newRoomData: Room) {\r\n  try {\r\n    analytics.logEvent('page_view', {\r\n      page_title: `Room ${newRoomData.name}`,\r\n      page_location: window.location.href,\r\n      page_path: `/#/rooms/${roomId}`,\r\n    });\r\n  } catch (error) {}\r\n}\r\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport { CreateOrJoinRoom } from './components/CreateOrJoinRoom';\r\nimport { Nav } from './components/Nav';\r\nimport { UsernameForm } from './components/UsernameForm';\r\nimport { useDeviceData } from './hooks/useDeviceData';\r\nimport { PokerRoomPage } from './pages/PokerRoomPage';\r\n\r\nfunction App() {\r\n  // ----------------------------------------\r\n  // state\r\n  // ----------------------------------------\r\n\r\n  // ----------------------------------------\r\n  // effects\r\n  // ----------------------------------------\r\n  const [deviceData, setName] = useDeviceData();\r\n\r\n  // ----------------------------------------\r\n  // helper functions\r\n  // ----------------------------------------\r\n\r\n  // ----------------------------------------\r\n  // render\r\n  // ----------------------------------------\r\n  return (\r\n    <Router>\r\n      <Nav deviceData={deviceData}></Nav>\r\n      <div className=\"container mt-3 mb-3\">\r\n        {deviceData ? (\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <CreateOrJoinRoom></CreateOrJoinRoom>\r\n            </Route>\r\n            <Route path=\"/rooms/:roomId\">\r\n              <PokerRoomPage deviceData={deviceData}></PokerRoomPage>\r\n            </Route>\r\n          </Switch>\r\n        ) : (\r\n          <UsernameForm onSubmit={setName} />\r\n        )}\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals(console.log);\r\nreportWebVitals();\r\n"],"sourceRoot":""}